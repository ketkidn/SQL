select * from   customers_bakery
select * from   products_bakery
select * from   orders_bakery
select * from   orderdetails_bakery

--1.Write a stored procedure to fetch all orders for a given customer ID.

create procedure pFetchorders
(
@customerid int
)
as 
begin

select	c.*,o.orderid,od.productid from customers_bakery c
 join orders_bakery o on c.customerid=o.customerid
 join orderdetails_bakery od on  o.orderid=od.orderid
where c.customerid=@customerid
end

--Execution
exec pFetchorders @customerid=1


--2.Create a function to calculate the total order amount for a given order ID.

alter function fcalctotalorderamt
(
@orderid int
)
returns float
begin

declare @amt decimal(10,2)
select @amt=totalamount from orders_bakery where orderid=@orderid

return isnull(@amt,0)
end

--execution
select dbo.fcalctotalorderamt(1)

--3.Create a view that shows all order details with customer name, product name, and total price per item.

create view masterview
as
select	o.*,c.name cname,p.name pname,p.price from customers_bakery c
 join orders_bakery o on c.customerid=o.customerid
 join orderdetails_bakery od on  o.orderid=od.orderid
 join products_bakery p on od.productid=p.productid

 --4.Write a CTE to find the top 3 best-selling products based on total quantity ordered.

 with CTE as
 (
 select productid ProductID,sum(quantity) TotalQuantity from dbo.orderdetails_bakery group by (productid) --order by sum(quantity)  desc
 )
 select top 3 * from CTE order by 2 desc

--5.Write a trigger that updates the TotalAmount in Orders table whenever a new record is inserted into OrderDetails.

CREATE TRIGGER trg_UpdateTotalAmount
ON OrderDetails_Bakery
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- Update TotalAmount in Orders_Bakery when new OrderDetails are added
    UPDATE o
    SET o.TotalAmount = (
        SELECT SUM(od.Quantity * od.Price)
        FROM OrderDetails_Bakery od
        WHERE od.OrderID = o.OrderID
    )
    FROM Orders_Bakery o
    INNER JOIN INSERTED i ON o.OrderID = i.OrderID;
END;

--6.Retrieve the customers who have placed more than 3 orders.
SELECT c.CustomerID, c.Name AS CustomerName, COUNT(o.OrderID) AS OrderCount
FROM Customers_Bakery c
JOIN Orders_Bakery o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.Name
HAVING COUNT(o.OrderID) > 3;


--7.Find the total revenue generated by each product category.
SELECT p.Category, SUM(od.Quantity * od.Price) AS TotalRevenue
FROM Products_Bakery p
JOIN OrderDetails_Bakery od ON p.ProductID = od.ProductID
GROUP BY p.Category
ORDER BY TotalRevenue DESC;


--8.Identify duplicate customers who have the same name and phone number.
SELECT Name, Phone, COUNT(*) AS DuplicateCount
FROM Customers_Bakery
WHERE Phone IS NOT NULL  -- Exclude NULL phones for duplicates
GROUP BY Name, Phone
HAVING COUNT(*) > 1;

--9.List all orders where the total amount is greater than the average order amount.
SELECT o.*
FROM Orders_Bakery o
WHERE o.TotalAmount > (SELECT AVG(TotalAmount) FROM Orders_Bakery);

--10.Find customers who have not placed any orders.
SELECT c.CustomerID, c.Name AS CustomerName
FROM Customers_Bakery c
LEFT JOIN Orders_Bakery o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;
